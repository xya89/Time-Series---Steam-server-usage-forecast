# Format Date.Time object in steam2
steam$DateTime <- as.Date(steam$DateTime)
# Trim all records before 2021, store the trimmed data into steam2
steam2 <- steam[6199:nrow(steam),]
rownames(steam2) <- NULL
variable.summary(steam2)
View(steam2)
# Remove Users, use In.Game as our target.
steam2$Users <- NULL
variable.summary(steam2)
plot(In.Game ~ DateTime, main="Number of Daily In Game Steam Users over Time", data=steam2)
plot(steam2,ylab='In game user count',type='o')
plot(steam2,ylab='In game user count',type='l')
points(y=steam2$In.Game,x=steam2$DateTime)
## PACF
pacf(steam2$In.Game)
## ACF
acf(steam2$In.Game)
## EACF
eacf(steam2$In.Game)
data(ima22.s)   #Simulated data for IMA(2,2) illustrated in Exhibit 5.5 of the textbook
plot(ima22.s,ylab="IMA(2,2) Simulation",type='o')    # data shows a stochastic upward trend
acf(ima22.s)     # Suggesting an MA(9) but...
pacf(ima22.s)    # Suggesting an AR(1)  (Fitting and Diagnostics needed)
eacf(ima22.s)    # Suggesting an ARMA(1,2) if ignoring one "X" in (1,3), or an ARMA(2,2)
view(steam2)
View(steam2)
# Try 2021.
steam3 <- steam2[1, 365,]
tail(steam3)
# Try 2021.
steam3 <- steam2[1:365,]
tail(steam3)
plot(steam3)
pacf(steam3$In.Game)
acf(steam3$In.Game)
eacf(steam3$In.Game)
In.Game.log <- log(steam2$In.Game) - lag(log(steam2$In.Game))
steam2.log <- steam2
steam2.log$In.Game <- In.Game.log
glimpse(steam2.log)
variable.summary(steam2.log)
steam2.log[steam2.log$In.Game == NA,]
steam2.log[is.na(steam2.log$In.Game),]
steam2.log <- steam2.log[2:nrow(steam2.log),]
glimpse(steam2.log)
variable.summary(steam2.log)
plot(steam2.log)
acf(steam2.log$In.Game)
pacf(steam2.log$In.Game)
acf(steam2.log$In.Game)
plot(steam2.log)
acf(steam2.log$In.Game)
pacf(steam2.log$In.Game)
eacf(steam2.log$In.Game)
# Dynamics method: Trying ARMA(p,p-1) for original series, 1st and 2nd-differenced series
plot(ima22.s,ylab="IMA(2,2) Simulation",type='o')
arima(ima22.s,order=c(1,0,0))  #  Phi_1 close to 1, large response time, log_L=-117.4
# Dynamics method: Trying ARMA(p,p-1) for original series, 1st and 2nd-differenced series
plot(ima22.s,ylab="IMA(2,2) Simulation",type='o')
arima(ima22.s,order=c(1,0,0))  #  Phi_1 close to 1, large response time, log_L=-117.4
arima(ima22.s,order=c(2,0,1))  #  Phi_2>0 and close to 1. log_L=-116.2 (not much improvement for 2 additional parameters)
arima(ima22.s,order=c(1,0,1))  #  Adding an MA term to ARIMA(1,0,0) doesn't help
arima(ima22.s,order=c(1,0,0))  #  Phi_1 close to 1, large response time, log_L=-117.4
plot(steam2, ylab("Daily In Game User Count"), type = "o")
plot(steam2, ylab=("Daily In Game User Count"), type = "o")
arima(steam2, order=c(1,0,0))
arima(steam2$In.Game, order=c(1,0,0))
arima(ima22.s,order=c(1,0,0))  #  Phi_1 close to 1, large response time, log_L=-117.4
arima(ima22.s,order=c(2,0,1))  #  Phi_2>0 and close to 1. log_L=-116.2 (not much improvement for 2 additional parameters)
order_list = c(c(1,0,0), c(2,0,1))
order_list[1]
order_list
order_list = c(c(1,0,0), c(2,0,1), c(3,0,2), c(4,0,3), c(5,0,6), c(6,0,5))
for i in order_list:
print(i)
for (i in order_list) {
print(i)
}
for (i in order_list) {
print(i, i+1, i+2)
}
for (i in order_list) {
temp <- c(i, i+1, i+2)
print(temp)
}
for (i in order_list) {
temp <- c(i, i+1, i+2)
print(order_list[i])
}
order_list[1]
order_list[2]
order_list[3]
order_list[4]
for (i in seq(1, nrow(order_list), by = 3)) {
print(i)
}
nrow(order_list)
length(order_list)
for (i in seq(1, length(order_list), by = 3)) {
print(i)
}
for (i in seq(1, length(order_list), by = 3)) {
print(i, i+1, i+2)
}
for (i in seq(1, length(order_list), by = 3)) {
print(c(i, i+1, i+2))
}
for (i in seq(1, length(order_list), by = 3)) {
print(order_list[i])
}
for (i in seq(1, length(order_list), by = 3)) {
print(c(order_list[i], order_list[i+1]))
}
for (i in seq(1, length(order_list), by = 3)) {
print(c(order_list[i], order_list[i+1], order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
print(c(order_list[i], order_list[i+1], order_list[i+2]))
arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
arima(steam2$In.Game, order=c(1,0,0))
print(c(order_list[i], order_list[i+1], order_list[i+2]))
for (i in seq(1, length(order_list), by = 3)) {
print(c(order_list[i], order_list[i+1], order_list[i+2]))
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order, sep = ',')
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c((order_list[i]),order_list[i+1],order_list[i+2]))
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c((order_list[i]),(order_list[i+1]),(order_list[i+2]))
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(c(order_list[i]),c(order_list[i+1]),c(order_list[i+2]))
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order[i,j,k] = c(order_list[i],order_list[i+1],order_list[i+2])
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = matrix(order_list[i],order_list[i+1],order_list[i+2])
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = (order_list[i],order_list[i+1],order_list[i+2])
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order[1])
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order[2])
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order[1][2])
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(order[1],)
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
order = c(order_list[i],order_list[i+1],order_list[i+2])
print(,order[1])
#arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
order
order[1]
order[2]
order_list[1]
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
#order = c(order_list[i],order_list[i+1],order_list[i+2])
#print(order[1])
arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2]))
}
c(order_list[1],order_list[2])
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
#order = c(order_list[i],order_list[i+1],order_list[i+2])
#print(order[1])
arima(steam2$In.Game,c(order_list[i],order_list[i+1],order_list[i+2]))
}
for (i in seq(1, length(order_list), by = 3)) {
#print(c(order_list[i], order_list[i+1], order_list[i+2]))
#order = c(order_list[i],order_list[i+1],order_list[i+2])
#print(order[1])
arima(steam2$In.Game,c(i,i,i))
}
c(1,0,2)
temp = c(1,0,2)
arima(steam2$In.Game, order=temp)
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
print("stop")
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
print("i")
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
print(i)
}
order_list[12]
order_list
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
print(my_order)
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
print(my_order)
arima(steam2$In.Game, order = my_order)
print(my_order)
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
print(my_order)
#arima(steam2$In.Game, order = my_order)
#print(my_order)
}
arima(steam2$In.Game, order=c(6,0,5))
arima(steam2$In.Game, order=c(5,0,4))
arima(steam2$In.Game, order=c(4,0,3))
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
}
order_list = c(c(1,0,0), c(2,0,1), c(3,0,2), c(4,0,3))
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
arima(steam2$In.Game, order = my_order)
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
print(arima(steam2$In.Game, order = my_order))
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
print(arima(steam2$In.Game, order = c(order_list[i],order_list[i+1],order_list[i+2])))
}
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
print(arima(steam2$In.Game, order = my_order))
}
arima(steam2$In.Game, order = c(2,0,1))
for (i in seq(1, length(order_list), by = 3)) {
my_order = c(order_list[i],order_list[i+1],order_list[i+2])
print(arima(steam2$In.Game, order = my_order))
}
plot(steam2.log,ylab='In game user count',type='l')
# Load required R packages
library("dplyr")
library("car")
library("forcats")
library("rpart")
library("rpart.plot")
library("nnet")
library("foreign")
library("corrplot")
library("randomForest")
library("pdp")
library("ggplot2")
library(gplots)
library("TSA")
library('lubridate')
library('Hmisc')
library('tidyverse')
library('ggplot2')
library('dplyr')
library('tidyquant')
library('quantmod')
library('TSstudio')
library('tseries')
library('MASS')
library('forecast')
library('TSA')
library("stats")
library("tseries")
library("ggplot2")
library("dplyr")
library("autoplotly")
source("BCA_functions_source_file.R")
source("Stat485-685_Rcode.R")
plot(steam2$In.Game, type = 'l',ylab='First Difference of User Count',xlab='Time')
plot(diff(steam2$In.Game), type = 'l',ylab='First Difference of User Count',xlab='Time')
acf(as.vector(diff(steam2$In.Game)),lag.max=100)
plot(diff(diff(steam2$In.Game),lag=7),type = 'l',xlab='Time',
ylab='First and Seasonal Difference of User Count')
m1.steam <- Arima(steam2$In.Game,order=c(2,1,2),seasonal=list(order=c(0,1,1),period=7))
m1.steam <- arima(steam2$In.Game,order=c(2,1,2),seasonal=list(order=c(0,1,1),period=7))
m1.steam
plot(window(rstandard(m1.steam)),ylab='Standardized Residuals m1',type='l')
acf(as.vector(window(rstandard(m1.steam))),
lag.max=200,ci.type='ma')
hist(window(rstandard(m1.steam)),
xlab='Standardized Residuals')
qqnorm(window(rstandard(m1.steam)))
qqline(window(rstandard(m1.steam)))
forecast_data <- forecast(m1.steam, 180)
# Load required R packages
library("dplyr")
library("car")
library("forcats")
library("rpart")
library("rpart.plot")
library("nnet")
library("foreign")
library("corrplot")
library("randomForest")
library("pdp")
library("ggplot2")
library(gplots)
library("TSA")
library('lubridate')
library('Hmisc')
library('tidyverse')
library('ggplot2')
library('dplyr')
library('tidyquant')
library('quantmod')
library('TSstudio')
library('tseries')
library('MASS')
library('forecast')
library('TSA')
library("stats")
library("tseries")
install.packages("forecast")
library("dplyr")
library("car")
library("forcats")
library("rpart")
library("rpart.plot")
library("nnet")
library("foreign")
library("corrplot")
library("randomForest")
library("pdp")
library("ggplot2")
library(gplots)
library("TSA")
library('lubridate')
library('Hmisc')
library('tidyverse')
library('ggplot2')
library('dplyr')
library('tidyquant')
library('quantmod')
library('TSstudio')
library('tseries')
library('MASS')
library('forecast')
library('TSA')
library("stats")
library("tseries")
library("ggplot2")
library("dplyr")
library("autoplotly")
install.packages('lubridate')
install.packages('Hmisc')
install.packages('tidyverse')
install.packages('ggplot2')
install.packages('dplyr')
install.packages('tidyquant')
install.packages('quantmod')
install.packages('TSstudio')
install.packages('tseries')
install.packages('MASS')
install.packages('forecast')
install.packages('TSA')
install.packages('forecast')
install.packages("lubridate")
install.packages("dplyr")
install.packages("TSstudio")
install.packages("tseries")
install.packages("MASS")
install.packages("lubridate")
install.packages("dplyr")
install.packages("TSstudio")
install.packages("tseries")
install.packages("MASS")
install.packages("dplyr")
install.packages("TSstudio")
library("dplyr")
library("car")
library("forcats")
library("rpart")
library("rpart.plot")
library("nnet")
library("foreign")
library("corrplot")
library("randomForest")
library("pdp")
library("ggplot2")
library(gplots)
library("TSA")
library('lubridate')
library('Hmisc')
library('tidyverse')
library('ggplot2')
library('dplyr')
library('tidyquant')
library('quantmod')
library('TSstudio')
library('tseries')
library('MASS')
library('forecast')
library('TSA')
library("stats")
library("tseries")
library("ggplot2")
library("dplyr")
library("autoplotly")
library("autoplotly")
install.packages("autoplotly")
library("dplyr")
library("car")
library("forcats")
library("rpart")
library("rpart.plot")
library("nnet")
library("foreign")
library("corrplot")
library("randomForest")
library("pdp")
library("ggplot2")
library(gplots)
library("TSA")
library('lubridate')
library('Hmisc')
library('tidyverse')
library('ggplot2')
library('dplyr')
library('tidyquant')
library('quantmod')
library('TSstudio')
library('tseries')
library('MASS')
library('forecast')
library('TSA')
library("stats")
library("tseries")
forecast_data <- forecast(m1.steam, 180)
library('forecast')
library("forecast")
install.packages("forecast")
library("forecast")
